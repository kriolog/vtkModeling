
# Setup vtkInstantiator registration for this library's classes.
#SET(VTK_USE_INSTANTIATOR_NEW 1)
VTK_MAKE_INSTANTIATOR3(
    "${LIBRARY_NAME}Instantiator"
    INSTANTIATOR_SOURCES
    "${SOURCES}"
    VTK_EXPORT
    ${PROJECT_BINARY_DIR}
    ""
)

if(COMMAND cmake_policy)
    cmake_policy(SET CMP0003 NEW)
endif(COMMAND cmake_policy)


# Create the ${LIBRARY_NAME} C++ library.
ADD_LIBRARY (${LIBRARY_NAME} ${SOURCES} ${INSTANTIATOR_SOURCES})
TARGET_LINK_LIBRARIES(${LIBRARY_NAME} ${LIBRARIES})
INCLUDE_DIRECTORIES(${INCLUDE_DIRS})


# Find and load VTK settings.
FIND_PACKAGE(VTK REQUIRED)
INCLUDE(${VTK_USE_FILE})


IF (VTK_USE_RENDERING)
  TARGET_LINK_LIBRARIES (${LIBRARY_NAME} vtkRendering)
  TARGET_LINK_LIBRARIES (${LIBRARY_NAME} vtkVolumeRendering)
  TARGET_LINK_LIBRARIES (${LIBRARY_NAME} vtkHybrid)
  TARGET_LINK_LIBRARIES (${LIBRARY_NAME} vtkWidgets)
ENDIF (VTK_USE_RENDERING)


# Create the ${LIBRARY_NAME} Python library.

#IF (VTK_WRAP_PYTHON)
IF(WRAP_PYTHON)
    INCLUDE(${VTK_CMAKE_DIR}/vtkWrapPython.cmake)
    SET(VTK_WRAP_PYTHON3_INIT_DIR "${PROJECT_SOURCE_DIR}/${LIBRARY_NAME}")
    
    VTK_WRAP_PYTHON3 (${LIBRARY_NAME}Python Python_SRCS "${SOURCES}")
    
    ADD_LIBRARY (${LIBRARY_NAME}PythonD ${Python_SRCS})
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME}PythonD ${LIBRARY_NAME})
    FOREACH(c ${WRAPPED_LIBRARIES})
        TARGET_LINK_LIBRARIES(${LIBRARY_NAME}PythonD ${c}PythonD)
    ENDFOREACH(c)
    
    ADD_LIBRARY (${LIBRARY_NAME}Python MODULE ${LIBRARY_NAME}PythonInit.cxx)
    TARGET_LINK_LIBRARIES(${LIBRARY_NAME}Python  ${LIBRARY_NAME}PythonD)
#ENDIF (VTK_WRAP_PYTHON)
ENDIF(WRAP_PYTHON)

